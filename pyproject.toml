[build-system]
# modern Python packaging - PEP 518準拠
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
# プロジェクト基本情報
name = "task-management-tools"
version = "0.1.1"
description = "分散タスク実行システム - Claude APIを使用したタスク管理ツール群"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Claude Code", email = "noreply@anthropic.com"}
]
maintainers = [
    {name = "Claude Code", email = "noreply@anthropic.com"}
]

# Python要件
requires-python = ">=3.8"

# 依存関係
dependencies = [
    # 現時点では標準ライブラリのみ使用
    # 必要に応じて以下を追加:
    # "requests>=2.25.0",
    # "aiohttp>=3.7.0",
]

# プロジェクト分類
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: System :: Distributed Computing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# キーワード
keywords = ["task", "management", "distributed", "claude", "api", "automation"]

# オプション依存関係
[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.10.0",
    "black>=21.0.0",
    "flake8>=3.8.0",
    "mypy>=0.910",
    "isort>=5.0.0",
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.10.0",
    "pytest-asyncio>=0.18.0",
]
lint = [
    "black>=21.0.0",
    "flake8>=3.8.0",
    "mypy>=0.910",
    "isort>=5.0.0",
]

# プロジェクトURL
[project.urls]
Homepage = "https://github.com/anthropics/claude-code"
Documentation = "https://docs.anthropic.com/en/docs/claude-code"
Repository = "https://github.com/anthropics/claude-code"
"Bug Reports" = "https://github.com/anthropics/claude-code/issues"

# コンソールスクリプト - エントリポイント
[project.scripts]
task-master = "tools.task_master:main"
task-worker = "tools.task_worker:main"
task-creator = "tools.task_creator:main"

# setuptools設定
[tool.setuptools]
# パッケージ自動検出
packages = ["tools"]
include-package-data = true

[tool.setuptools.package-data]
# パッケージデータファイルの指定
tools = ["*.md", "*.txt", "*.json"]

# Black設定（コードフォーマッター）
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # 除外するディレクトリやファイル
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort設定（import文のソート）
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tools"]

# mypy設定（型チェック）
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# pytest設定
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]

# カバレッジ設定
[tool.coverage.run]
source = ["tools"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]